"use strict";(self.webpackChunkweaver_dlt_interoperability=self.webpackChunkweaver_dlt_interoperability||[]).push([[4010],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),k=d(n),m=i,N=k["".concat(s,".").concat(m)]||k[m]||c[m]||r;return n?a.createElement(N,o(o({ref:t},p),{},{components:n})):a.createElement(N,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=k;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},8854:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return k}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"asset-transfer",title:"Asset Transfer",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},s=void 0,d={unversionedId:"external/getting-started/interop/asset-transfer",id:"external/getting-started/interop/asset-transfer",isDocsHomePage:!1,title:"Asset Transfer",description:"\x3c!--",source:"@site/docs/external/getting-started/interop/asset-transfer.md",sourceDirName:"external/getting-started/interop",slug:"/external/getting-started/interop/asset-transfer",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/asset-transfer",editUrl:"https://github.com/hyperledger-labs/weaver-dlt-interoperability/edit/master/docs/external/getting-started/interop/asset-transfer.md",tags:[],version:"current",frontMatter:{id:"asset-transfer",title:"Asset Transfer",pagination_prev:"external/getting-started/interop/overview",pagination_next:"external/getting-started/enabling-weaver-network/overview"},sidebar:"Documentation",previous:{title:"Testing Interoperation Modes",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/interop/overview"},next:{title:"Enabling Weaver in Existing DLT Applications",permalink:"/weaver-dlt-interoperability/docs/external/getting-started/enabling-weaver-network/overview"}},p=[{value:"1. Fabric with Fabric",id:"1-fabric-with-fabric",children:[{value:"<strong>Transfer or recover a bond (non-fungible) asset</strong>",id:"transfer-or-recover-a-bond-non-fungible-asset",children:[],level:3},{value:"<strong>Transfer or recover token (fungible) assets</strong>",id:"transfer-or-recover-token-fungible-assets",children:[],level:3}],level:2},{value:"2. Corda with Corda",id:"2-corda-with-corda",children:[{value:"<strong>Transfer or recover token (fungible) assets</strong>",id:"transfer-or-recover-token-fungible-assets-1",children:[],level:3},{value:"<strong>Transfer or recover token (Corda fungible house-token) assets</strong>",id:"transfer-or-recover-token-corda-fungible-house-token-assets",children:[],level:3}],level:2}],c={toc:p};function k(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This document lists sample ways in which you can exercise the asset-transfer interoperation protocol on the test network ",(0,r.kt)("a",{parentName:"p",href:"../test-network/overview"},"launched earlier"),"."),(0,r.kt)("p",null,"Once the networks, relays, and drivers have been launched, and the ledgers bootstrapped, you can trigger the following interoperation flows corresponding to distinct asset-sharing combinations ",(0,r.kt)("em",{parentName:"p"},"other combinations of DLTs will be supported soon"),"):"),(0,r.kt)("h2",{id:"1-fabric-with-fabric"},"1. Fabric with Fabric"),(0,r.kt)("p",null,"One Fabric network transfers either a bond or some tokens owned by Alice to Bob in the other network"),(0,r.kt)("p",null,"Assuming that the ",(0,r.kt)("inlineCode",{parentName:"p"},"simpleassettransfer")," chaincode has been deployed in both networks, run the following steps by navigating to the ",(0,r.kt)("inlineCode",{parentName:"p"},"samples/fabric/fabric-cli")," folder (",(0,r.kt)("em",{parentName:"p"},"the Go CLI doesn't support asset transfer yet"),")."),(0,r.kt)("h3",{id:"transfer-or-recover-a-bond-non-fungible-asset"},(0,r.kt)("strong",{parentName:"h3"},"Transfer or recover a bond (non-fungible) asset")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," owns bonds with ids ",(0,r.kt)("inlineCode",{parentName:"li"},"a03")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"a04")," as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network1\n./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network1\n')),"You should see a JSON structure corresponding to the bond being logged on the console in each case."),(0,r.kt)("li",{parentName:"ol"},"Get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",(0,r.kt)("inlineCode",{parentName:"li"},"a03")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=bond --ref=a03 --data-file=src/data/assetsForTransfer.json\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,r.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,r.kt)("li",{parentName:"ol"},"Get ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type=bond --pledge-id=<pledge-id> --param=bond01:a03\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," does not own this asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network1\n')),"You should see an error message like ",(0,r.kt)("inlineCode",{parentName:"li"},"Error: the asset a03 does not exist"),"."),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," now owns this asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=bob mychannel simpleassettransfer ReadAsset \'["bond01","a03"]\' --local-network=network2\n'))),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to pledge bond ",(0,r.kt)("inlineCode",{parentName:"li"},"a04")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=bond --ref=a04 --data-file=src/data/assetsForTransfer.json\n")),"Wait for a minute as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,r.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," to claim this bond asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type=bond --pledge-id=<pledge-id> --param=bond01:a04\n")),"This should fail as the pledge has already expired."),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to reclaim the asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer reclaim --source-network=network1 --user=alice --type=bond --pledge-id=<pledge-id> --param=bond01:a04\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," owns this asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=alice mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network1\n'))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," does not own this asset as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./bin/fabric-cli chaincode query --user=bob mychannel simpleassettransfer ReadAsset \'["bond01","a04"]\' --local-network=network2\n')),"You should see an error message like ",(0,r.kt)("inlineCode",{parentName:"li"},"Error: the asset a04 does not exist"),".")),(0,r.kt)("h3",{id:"transfer-or-recover-token-fungible-assets"},(0,r.kt)("strong",{parentName:"h3"},"Transfer or recover token (fungible) assets")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," owns ",(0,r.kt)("inlineCode",{parentName:"li"},"10000")," tokens as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," owns no tokens as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")),"You should see an error message like ",(0,r.kt)("inlineCode",{parentName:"li"},"Error: owner does not have a wallet"),"."),(0,r.kt)("li",{parentName:"ol"},"Get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to pledge 50 tokens to ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 hour timeout):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=3600 --type=token --units=50 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,r.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,r.kt)("li",{parentName:"ol"},"Get ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type=token --pledge-id=<pledge-id> --param=token1:50\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," owns ",(0,r.kt)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",(0,r.kt)("inlineCode",{parentName:"li"},"50"),") as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," now owns ",(0,r.kt)("inlineCode",{parentName:"li"},"50")," tokens as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n"))),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to pledge 100 tokens to ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," as follows (with a 1 minute timeout):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer pledge --source-network=network1 --dest-network=network2 --recipient=bob --expiry-secs=60 --type=token --units=100 --owner=alice --data-file=src/data/tokensForTransfer.json\n")),"Wait for a minute as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sleep 60\n")),"You should see a message containing the unique ID of this pledge on the console as ",(0,r.kt)("inlineCode",{parentName:"li"},"Asset pledged with ID <pledge-id>")," (",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," is a hexadecimal string)."),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," to claim these tokens as follows (replace ",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>")," with the above hexadecimal value):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer claim --source-network=network1 --dest-network=network2 --user=bob --owner=alice --type=token --pledge-id=<pledge-id> --param=token1:100\n")),"This should fail as the pledge has already expired."),(0,r.kt)("li",{parentName:"ol"},"Now get ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," to reclaim these tokens as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./bin/fabric-cli asset transfer reclaim --source-network=network1 --user=alice --type=token --pledge-id=<pledge-id> --param=token1:100\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"alice")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network1")," still owns ",(0,r.kt)("inlineCode",{parentName:"li"},"9950")," tokens (after losing ",(0,r.kt)("inlineCode",{parentName:"li"},"50"),") as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network1 alice\n"))),(0,r.kt)("li",{parentName:"ol"},"Verify that ",(0,r.kt)("inlineCode",{parentName:"li"},"bob")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"network2")," still owns only ",(0,r.kt)("inlineCode",{parentName:"li"},"50")," tokens as follows:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./scripts/getTokenBalance.sh network2 bob\n")))),(0,r.kt)("h2",{id:"2-corda-with-corda"},"2. Corda with Corda"),(0,r.kt)("p",null,"One Corda network transfers either a bond or some tokens owned by ",(0,r.kt)("inlineCode",{parentName:"p"},"PartyA")," (",(0,r.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=10006"),") to ",(0,r.kt)("inlineCode",{parentName:"p"},"PartyB")," (",(0,r.kt)("inlineCode",{parentName:"p"},"CORDA_PORT=30009"),") in the other network."),(0,r.kt)("h3",{id:"transfer-or-recover-token-fungible-assets-1"},(0,r.kt)("strong",{parentName:"h3"},"Transfer or recover token (fungible) assets")),(0,r.kt)("p",null,"Assuming that the corDapp ",(0,r.kt)("inlineCode",{parentName:"p"},"cordaSimpleApplication")," has been deployed in both networks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"network-id")," for each Corda network. This is a network state, and will be available in the vault of all the parties which are members of the network (if required, run the command ",(0,r.kt)("inlineCode",{parentName:"li"},"./clients/build/install/clients/bin/clients transfer get-party-name")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009")," to fetch the name of the parties ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," respectively).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=10006 ./clients/build/install/clients/bin/clients network-id create-state "Corda_Network" -m "O=PartyA,L=London,C=GB"\nCORDA_PORT=30009 ./clients/build/install/clients/bin/clients network-id create-state "Corda_Network2" -m "O=PartyA,L=London,C=GB;O=PartyB,L=London,C=GB"\n')),"The above assumes that ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," was started earlier with ",(0,r.kt)("inlineCode",{parentName:"li"},"1-node"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," was started earlier with ",(0,r.kt)("inlineCode",{parentName:"li"},"2-nodes")," (network state created in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," can be cross checked by running the commands ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients network-id retrieve-state-and-ref")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients network-id retrieve-state-and-ref")," respectively in these networks)."),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"5")," tokens of type ",(0,r.kt)("inlineCode",{parentName:"li"},"t1")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients issue-asset-state 5 t1\n")),"(check token balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1"),")"),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," pledge these tokens in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," to be transferred to ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," (pledge burns the tokens in the source/exporting network):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer pledge-asset --fungible --timeout=\"3600\" --import-network-id='Corda_Network2' --recipient='O=PartyB, L=London, C=GB' --param='t1:5'\n")),"Note the ",(0,r.kt)("inlineCode",{parentName:"li"},"pledge-id")," displayed after successful execution of the command, which will be used in next steps. Let's denote it ",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>"),"\n(pledge details can be cross checked using the commands ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer is-asset-pledged -pid <pledge-id>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006  ./clients/build/install/clients/bin/clients transfer get-pledge-state -pid <pledge-id>"),"; moreover, check the token asset balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1")," which should not include the asset ",(0,r.kt)("inlineCode",{parentName:"li"},"t1:5")," issued earlier)."),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," claim in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," the tokens which are pledged in the network (claim issues the tokens in the destination/importing network):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30009 ./clients/build/install/clients/bin/clients transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='O=PartyA, L=London, C=GB' --transfer-category='token.corda' --export-network-id='Corda_Network' --param='t1:5' --import-relay-address='localhost:9082'\n")),"(the ",(0,r.kt)("inlineCode",{parentName:"li"},"linear-id"),", which is displayed after successful execution of the above command, can be used to check the newly issued tokens for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," by running ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients get-state-using-linear-id <linear-id>"),"; or simply check the token balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients get-asset-states-by-type t1")," which should output ",(0,r.kt)("inlineCode",{parentName:"li"},"5")," tokens of type ",(0,r.kt)("inlineCode",{parentName:"li"},"t1"),")")),(0,r.kt)("p",null,"The above steps complete a successful asset transfer from the Corda network ",(0,r.kt)("inlineCode",{parentName:"p"},"Corda_Network")," to the Corda network ",(0,r.kt)("inlineCode",{parentName:"p"},"Corda_Network2"),". In addition to the above commands, following is an extra option."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," try re-claim the token ",(0,r.kt)("inlineCode",{parentName:"li"},"t1:5")," asset, which will succeed only if the asset was not claimed by ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," and the pledge has expired:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients transfer reclaim-pledged-asset --pledge-id=<pledge-id> --export-relay-address='localhost:9081' --transfer-category='token.corda' --import-network-id='Corda_Network2' --param='t1:5'\n")))),(0,r.kt)("h3",{id:"transfer-or-recover-token-corda-fungible-house-token-assets"},(0,r.kt)("strong",{parentName:"h3"},"Transfer or recover token (Corda fungible house-token) assets")),(0,r.kt)("p",null,"Assuming that the corDapp ",(0,r.kt)("inlineCode",{parentName:"p"},"fungible-house-token")," has been deployed in both networks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Navigate to ",(0,r.kt)("inlineCode",{parentName:"li"},"samples/corda/corda-simple-application")," folder."),(0,r.kt)("li",{parentName:"ul"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},"network-id")," for each Corda network. This is a network state, and will be available in the vault of all the parties which are members of the network (if required, run the command ",(0,r.kt)("inlineCode",{parentName:"li"},"./clients/build/install/clients/bin/clients transfer get-party-name")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30006"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009")," to fetch the name of the parties, ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2"),", or ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," respectively).",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=10006 ./clients/build/install/clients/bin/clients network-id create-state "Corda_Network" -m "O=PartyA,L=London,C=GB"\nCORDA_PORT=30009 ./clients/build/install/clients/bin/clients network-id create-state "Corda_Network2" -m "O=PartyA,L=London,C=GB;O=PartyB,L=London,C=GB"\n')),"The above assumes that ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," was started earlier with ",(0,r.kt)("inlineCode",{parentName:"li"},"1-node"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," was started earlier with ",(0,r.kt)("inlineCode",{parentName:"li"},"2-nodes")," (network state created in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," can be cross checked by running the commands ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients network-id retrieve-state-and-ref")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients network-id retrieve-state-and-ref")," respectively in these networks)."),(0,r.kt)("li",{parentName:"ul"},"Initialize Corda fungible house tokens in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token init\nCORDA_PORT=30009 ./clients/build/install/clients/bin/clients house-token init\n"))),(0,r.kt)("li",{parentName:"ul"},"Issue ",(0,r.kt)("inlineCode",{parentName:"li"},"100")," house-tokens to ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token issue -p "O=PartyA, L=London, C=GB" -a 100\n')),"(check token balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token get-balance"),")"),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," pledge these tokens in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," to be transferred to ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," of ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," (pledge burns the tokens in the source/exporting network):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token transfer pledge-asset --fungible --timeout=\"3600\" --import-network-id='Corda_Network2' --recipient='O=PartyB, L=London, C=GB' --param='house:5'\n")),"Note the ",(0,r.kt)("inlineCode",{parentName:"li"},"pledge-id")," displayed after successful execution of the command, which will be used in next steps. Let's denote it ",(0,r.kt)("inlineCode",{parentName:"li"},"<pledge-id>"),"\n(pledge details can be cross checked using the commands ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token transfer is-asset-pledged -pid <pledge-id>")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token transfer get-pledge-state -pid <pledge-id>"),"; moreover, check the token balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token get-balance")," which should output 95 house tokens)."),(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," claim in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," the tokens which are pledged in the network (claim issues the tokens in the destination/importing network):",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network2 CORDA_PORT=30006 ./clients/build/install/clients/bin/clients house-token transfer claim-remote-asset --pledge-id='<pledge-id>' --locker='O=PartyA, L=London, C=GB' --transfer-category='house-token.corda' --export-network-id='Corda_Network' --param='house:5' --import-relay-address='localhost:9082'\n")),"(check the token balance for ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network2")," by running the command ",(0,r.kt)("inlineCode",{parentName:"li"},"CORDA_PORT=30009 ./clients/build/install/clients/bin/clients house-token get-balance")," which should output ",(0,r.kt)("inlineCode",{parentName:"li"},"5")," house tokens)")),(0,r.kt)("p",null,"The above steps complete a successful asset transfer from the Corda network ",(0,r.kt)("inlineCode",{parentName:"p"},"Corda_Network")," to the Corda network ",(0,r.kt)("inlineCode",{parentName:"p"},"Corda_Network2"),". In addition to the above commands, following is an extra option."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Let ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyA")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Corda_Network")," try re-claim the token ",(0,r.kt)("inlineCode",{parentName:"li"},"house:5")," asset, which will succeed only if the house-token asset was not claimed by ",(0,r.kt)("inlineCode",{parentName:"li"},"PartyB")," and the pledge has expired:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"NETWORK_NAME=Corda_Network CORDA_PORT=10006 ./clients/build/install/clients/bin/clients house-token transfer reclaim-pledged-asset --pledge-id='<pledge-id>' --export-relay-address='localhost:9081' --transfer-category='house-token.corda' --import-network-id='Corda_Network2' --param='house:5'\n")))))}k.isMDXComponent=!0}}]);